Flexibility to embed fit in other systems sounds great. The described
bug.Close() would be one way to implement this feature.

This powerful feature may be better implemented in other ways, either at the
VCS level or separately.

Questions naturally arise about how this would work depending on how it is
implemented. The right implementation should be at an appropriate level of
abstraction so as not to artificially exclude alternative implementations.

For example a file containing a list of email addresses in each issue directory
could be read and used only for changes to that issue.

Projects may not find this highly ineffective. Projects often rely on
notifications across whole projects, not just single issues. People in projects
may use the email notifications in many different ways.

A git plugin run during the post-receive hook exists: git-multimail.py

This is a tool distributed with git and developed at
https://github.com/git-multimail/git-multimail

The recommended implementation is a python override of
get_revision_recipients() as described on line 2555 of
https://github.com/git-multimail/git-multimail/blob/master/git-multimail/git_multimail.py
as of release 1.5.0.

The git-multimail/post.receive.example file has just such python overrides.

If a python implementation is not desired a configurable exerimental feature
multimailhook.refFilterInclusionRegex is part of git-multimail.py. It matches
against complete refnames and could match against just issue path names.  The
git-multimail/README.rst describes features "multimailhook.refFilter(*)Regex"
for Inclusion, Exclusion, DoSend and DontSend settings.

github and other systems built on top of VCS have their own notification
systems which may be adequate.

There are available workarounds and alternative ways of handling email
notifications. Please share your solutions.

